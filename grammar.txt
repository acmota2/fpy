all             : BEGIN body END
body            : function
                | body function
function        : FDEF prefix args '{' expression '}'
                | FDEF prefix args '{' let_block expression '}'
args            : '(' ')'
                | '(' pattern_list ')'
prefix          : ID
                | '|' SPECIALID '|'
let_block       : LET '{' let_cont '}'
let_cont        : assign
                | let_cont ',' assign
assign          : lpattern '=' expression
lpattern        : lvar
                | llist
                | ltuple
llist           : '[' ']'
                | '[' pattern_list ']'
                | '[' lpattern '|' lpattern ']'
pattern_list    : lpattern
                | pattern_list ',' lpattern
ltuple          : '(' ')'
                | '(' ltuple_cont ')'
ltuple_cont     : lpattern ',' lpattern
                | ltuple_cont ',' lpattern
lvar            : ID
                | '|' SPECIALID '|'
                | STRING
                | NUM
                | CHAR
                | BOOL
                | '(' lpattern ')'
expression      : compound
                | lambda
                | expression infix compound
                | '(' infix expression ')'
                | '(' expression infix ')'
lambda          : FDEF '(' ')' '{' expression '}' 
                | FDEF '(' pattern_list ')' '{' expression '}'
compound        : multivar
                | COND '{' cond ',' ELSE ':' compound '}'
                | IF compound THEN compound ELSE compound
cond            : cond_singl
                | cond ',' cond_singl
cond_singl      : compound ':' compound
infix           : '`' ID '`'
                | SPECIALID
multivar        : primaryvar
                | rlist
                | rtuple
                | multivar '(' exp_list ')'
primaryvar      : ID
                | '|' SPECIALID '|'
                | STRING
                | NUM
                | CHAR
                | BOOL
                | '(' expression ')'
rtuple          : '(' ')'
                | '(' rtuple_cont ')'
rtuple_cont     : expression ',' expression
                | rtuple_cont ',' expression
rlist           : '[' ']'
                | '[' exp_list ']'
                | '[' expression '|' expression ']'
exp_list        : expression
                | exp_list ',' expression