
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ALIAS BEGIN BOOL BOOLT CHAR CHART COND ELSE END FDEF FLOAT FLOATT ID IF INT INTT LET RANGER RARROW SPECIALID STRINGT THEN TYPECLASS\n    all             : \n                    | BEGIN END\n                    | BEGIN body END\n\n    body            : statement\n                    | body statement\n\n    statement       : function\n                    | ALIAS ID '=' typedesc\n                    | LET ID annotation '=' conditional\n\n    function        : FDEF prefix args returntype '{' compound '}'\n                    | FDEF prefix args returntype '{' let_block compound '}'\n\n    args            : '(' ')'\n                    | '(' arg_list ')'\n\n    arg_list        : lpattern annotation\n                    | arg_list ',' lpattern annotation\n\n    prefix          : ID\n                    | '[' SPECIALID ']'\n\n    returntype      : \n                    | RARROW typedesc\n\n    annotation      : \n                    | ':' typedesc\n\n    typedesc        : typeid\n                    | typeclass\n                    | function_type\n                    | '(' tuple_type ')'\n\n    typeclass       : TYPECLASS ID\n\n    function_type   : '(' typedesc ')' RARROW typedesc\n                    | '(' tuple_type ')' RARROW typedesc\n\n    tuple_type      : typeid ',' typeid\n                    | tuple_type ',' typeid\n\n    typeid          : INT\n                    | FLOAT\n                    | CHAR\n                    | BOOL\n                    | ID\n                    | '[' typedesc ']'\n\n    let_block       : LET '{' let_cont '}'\n\n    let_cont        : assign\n                    | let_cont ',' assign\n\n    assign          : lpattern annotation '=' conditional\n\n    lpattern        : lvar\n                    | llist\n                    | ltuple\n\n    llist           : '[' ']'\n                    | '[' pattern_list ']'\n                    | '[' lpattern '|' lpattern ']'\n\n    pattern_list    : lpattern\n                    | pattern_list ',' lpattern\n\n    ltuple          : '(' ')'\n                    | '(' ltuple_cont ')'\n\n    ltuple_cont     : lpattern ',' lpattern\n                    | ltuple_cont ',' lpattern\n\n    lvar            : ID\n                    | '[' SPECIALID ']'\n                    | STRINGT\n                    | INTT\n                    | FLOATT\n                    | CHART\n                    | BOOLT\n\n    conditional     : compound\n                    | IF conditional THEN conditional ELSE conditional\n\n    compound        : expression\n                    | compound infix expression\n                    | '(' compound infix ')'\n                    | '(' infix expression ')'\n\n    infix           : '`' ID '`'\n                    | SPECIALID\n\n    expression      : multivar\n                    | lambda\n                    | cond_block\n\n    cond_block      : COND '{' cond ',' ELSE ':' conditional '}'\n\n    cond            : cond_singl\n                    | cond ',' cond_singl\n\n    cond_singl      : conditional ':' conditional\n\n    lambda          : FDEF '(' ')' '{' conditional '}' \n                    | FDEF '(' pattern_list ')' '{' conditional '}'\n\n    multivar        : primaryvar\n                    | rlist\n                    | rtuple\n                    | multivar '(' condition_list ')'\n\n    primaryvar      : ID\n                    | '[' SPECIALID ']'\n                    | INTT\n                    | FLOATT\n                    | CHART\n                    | STRINGT\n                    | BOOLT\n                    | '(' conditional ')'\n\n    rtuple          : '(' ')'\n                    | '(' rtuple_cont ')'\n\n    rtuple_cont     : conditional ',' conditional\n                    | rtuple_cont ',' conditional\n\n    rlist           : '[' ']'\n                    | '[' condition_list ']'\n                    | '[' conditional '|' conditional ']'\n                    | '[' conditional RANGER conditional ']'\n\n    condition_list  : conditional\n                    | condition_list ',' conditional\n    "
    
_lr_action_items = {'$end':([0,1,3,10,],[-1,0,-2,-3,]),'BEGIN':([0,],[2,]),'END':([2,4,5,6,11,23,24,25,26,27,29,30,31,32,58,59,60,61,63,65,66,67,68,69,70,74,75,76,77,78,91,95,102,109,127,133,135,145,146,150,158,159,162,163,166,174,185,186,190,191,196,199,],[3,10,-4,-6,-5,-34,-7,-21,-22,-23,-30,-31,-32,-33,-25,-80,-8,-59,-61,-67,-68,-69,-76,-77,-78,-82,-83,-84,-85,-86,-24,-35,-88,-92,-62,-87,-89,-81,-93,-9,-27,-26,-63,-64,-79,-10,-94,-95,-60,-74,-75,-70,]),'ALIAS':([2,4,5,6,11,23,24,25,26,27,29,30,31,32,58,59,60,61,63,65,66,67,68,69,70,74,75,76,77,78,91,95,102,109,127,133,135,145,146,150,158,159,162,163,166,174,185,186,190,191,196,199,],[7,7,-4,-6,-5,-34,-7,-21,-22,-23,-30,-31,-32,-33,-25,-80,-8,-59,-61,-67,-68,-69,-76,-77,-78,-82,-83,-84,-85,-86,-24,-35,-88,-92,-62,-87,-89,-81,-93,-9,-27,-26,-63,-64,-79,-10,-94,-95,-60,-74,-75,-70,]),'LET':([2,4,5,6,11,23,24,25,26,27,29,30,31,32,58,59,60,61,63,65,66,67,68,69,70,74,75,76,77,78,79,91,95,102,109,127,133,135,145,146,150,158,159,162,163,166,174,185,186,190,191,196,199,],[8,8,-4,-6,-5,-34,-7,-21,-22,-23,-30,-31,-32,-33,-25,-80,-8,-59,-61,-67,-68,-69,-76,-77,-78,-82,-83,-84,-85,-86,114,-24,-35,-88,-92,-62,-87,-89,-81,-93,-9,-27,-26,-63,-64,-79,-10,-94,-95,-60,-74,-75,-70,]),'FDEF':([2,4,5,6,11,23,24,25,26,27,29,30,31,32,35,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,76,77,78,79,91,95,96,98,101,102,105,107,109,113,127,128,130,131,133,134,135,136,145,146,147,148,149,150,158,159,160,162,163,166,167,169,170,174,179,181,185,186,187,190,191,193,195,196,199,],[9,9,-4,-6,-5,-34,-7,-21,-22,-23,-30,-31,-32,-33,71,-25,-80,-8,-59,71,-61,71,-67,-68,-69,-76,-77,-78,71,-82,-83,-84,-85,-86,71,-24,-35,71,-66,71,-88,71,71,-92,71,-62,71,71,71,-87,71,-89,71,-81,-93,71,71,71,-9,-27,-26,-65,-63,-64,-79,71,71,71,-10,71,71,-94,-95,-36,-60,-74,71,71,-75,-70,]),'ID':([7,8,9,17,19,21,28,33,34,35,38,39,47,62,64,73,79,85,92,94,96,97,98,101,105,106,107,113,116,117,121,122,123,125,128,130,131,134,136,147,148,149,152,160,167,169,170,179,181,187,188,193,195,],[12,13,15,23,23,46,23,23,58,59,23,46,46,59,59,59,59,46,23,23,59,129,-66,59,59,46,59,59,46,46,46,46,23,23,59,59,59,59,59,59,59,59,46,-65,59,59,59,59,59,-36,46,59,59,]),'[':([9,17,19,21,28,33,35,38,39,47,62,64,73,79,85,92,94,96,98,101,105,106,107,113,116,117,121,122,123,125,128,130,131,134,136,147,148,149,152,160,167,169,170,179,181,187,188,193,195,],[16,33,33,47,33,33,73,33,47,47,73,73,73,73,47,33,33,73,-66,73,73,47,73,73,47,47,47,47,33,33,73,73,73,73,73,73,73,73,47,-65,73,73,73,73,73,-36,47,73,73,]),'=':([12,13,18,23,25,26,27,29,30,31,32,36,43,44,45,46,48,49,50,51,52,58,81,88,91,95,115,119,120,158,159,177,178,189,],[17,-19,35,-34,-21,-22,-23,-30,-31,-32,-33,-20,-40,-41,-42,-52,-54,-55,-56,-57,-58,-25,-48,-43,-24,-35,-49,-53,-44,-27,-26,-19,-45,195,]),':':([13,42,43,44,45,46,48,49,50,51,52,59,61,63,65,66,67,68,69,70,74,75,76,77,78,81,88,102,109,115,118,119,120,127,133,135,143,145,146,162,163,166,177,178,182,185,186,190,191,196,199,],[19,19,-40,-41,-42,-52,-54,-55,-56,-57,-58,-80,-59,-61,-67,-68,-69,-76,-77,-78,-82,-83,-84,-85,-86,-48,-43,-88,-92,-49,19,-53,-44,-62,-87,-89,170,-81,-93,-63,-64,-79,19,-45,193,-94,-95,-60,-74,-75,-70,]),'(':([14,15,17,19,21,28,33,35,38,39,47,53,59,62,64,65,68,69,70,71,73,74,75,76,77,78,79,85,96,98,101,102,105,106,107,109,113,116,117,121,122,123,125,128,130,131,133,134,135,136,145,146,147,148,149,152,160,166,167,169,170,179,181,185,186,187,188,193,195,],[21,-15,28,28,39,28,28,64,28,39,39,-16,-80,64,64,105,-76,-77,-78,106,64,-82,-83,-84,-85,-86,64,39,128,-66,128,-88,64,39,64,-92,64,39,39,39,39,28,28,64,64,128,-87,64,-89,64,-81,-93,64,64,64,39,-65,-79,64,64,64,64,64,-94,-95,-36,39,64,64,]),'SPECIALID':([16,47,59,61,63,64,65,66,67,68,69,70,73,74,75,76,77,78,100,102,109,112,127,133,135,145,146,151,162,163,166,185,186,191,196,199,],[22,87,-80,98,-61,98,-67,-68,-69,-76,-77,-78,108,-82,-83,-84,-85,-86,98,-88,-92,98,-62,-87,-89,-81,-93,98,-63,-64,-79,-94,-95,-74,-75,-70,]),'INT':([17,19,28,33,38,92,94,123,125,],[29,29,29,29,29,29,29,29,29,]),'FLOAT':([17,19,28,33,38,92,94,123,125,],[30,30,30,30,30,30,30,30,30,]),'CHAR':([17,19,28,33,38,92,94,123,125,],[31,31,31,31,31,31,31,31,31,]),'BOOL':([17,19,28,33,38,92,94,123,125,],[32,32,32,32,32,32,32,32,32,]),'TYPECLASS':([17,19,28,33,38,123,125,],[34,34,34,34,34,34,34,]),'{':([20,23,25,26,27,29,30,31,32,37,40,58,72,80,84,91,95,114,139,158,159,168,],[-17,-34,-21,-22,-23,-30,-31,-32,-33,79,-11,-25,107,-18,-12,-24,-35,152,167,-27,-26,181,]),'RARROW':([20,40,84,91,93,],[38,-11,-12,123,125,]),')':([21,23,25,26,27,29,30,31,32,36,39,41,42,43,44,45,46,48,49,50,51,52,54,55,56,58,59,61,63,64,65,66,67,68,69,70,74,75,76,77,78,81,82,86,88,91,95,98,100,102,103,104,106,109,115,118,119,120,124,126,127,128,131,132,133,135,137,138,140,141,145,146,153,154,155,156,158,159,160,162,163,164,165,166,171,178,185,186,190,191,196,199,],[40,-34,-21,-22,-23,-30,-31,-32,-33,-20,81,84,-19,-40,-41,-42,-52,-54,-55,-56,-57,-58,91,93,-21,-25,-80,-59,-61,102,-67,-68,-69,-76,-77,-78,-82,-83,-84,-85,-86,-48,115,-13,-43,-24,-35,-66,-59,-88,133,135,139,-92,-49,-19,-53,-44,-29,-28,-62,102,162,163,-87,-89,166,-96,168,-46,-81,-93,-51,-50,-14,-47,-27,-26,-65,-63,-64,-90,-91,-79,-97,-45,-94,-95,-60,-74,-75,-70,]),'STRINGT':([21,35,39,47,62,64,73,79,85,96,98,101,105,106,107,113,116,117,121,122,128,130,131,134,136,147,148,149,152,160,167,169,170,179,181,187,188,193,195,],[48,77,48,48,77,77,77,77,48,77,-66,77,77,48,77,77,48,48,48,48,77,77,77,77,77,77,77,77,48,-65,77,77,77,77,77,-36,48,77,77,]),'INTT':([21,35,39,47,62,64,73,79,85,96,98,101,105,106,107,113,116,117,121,122,128,130,131,134,136,147,148,149,152,160,167,169,170,179,181,187,188,193,195,],[49,74,49,49,74,74,74,74,49,74,-66,74,74,49,74,74,49,49,49,49,74,74,74,74,74,74,74,74,49,-65,74,74,74,74,74,-36,49,74,74,]),'FLOATT':([21,35,39,47,62,64,73,79,85,96,98,101,105,106,107,113,116,117,121,122,128,130,131,134,136,147,148,149,152,160,167,169,170,179,181,187,188,193,195,],[50,75,50,50,75,75,75,75,50,75,-66,75,75,50,75,75,50,50,50,50,75,75,75,75,75,75,75,75,50,-65,75,75,75,75,75,-36,50,75,75,]),'CHART':([21,35,39,47,62,64,73,79,85,96,98,101,105,106,107,113,116,117,121,122,128,130,131,134,136,147,148,149,152,160,167,169,170,179,181,187,188,193,195,],[51,76,51,51,76,76,76,76,51,76,-66,76,76,51,76,76,51,51,51,51,76,76,76,76,76,76,76,76,51,-65,76,76,76,76,76,-36,51,76,76,]),'BOOLT':([21,35,39,47,62,64,73,79,85,96,98,101,105,106,107,113,116,117,121,122,128,130,131,134,136,147,148,149,152,160,167,169,170,179,181,187,188,193,195,],[52,78,52,52,78,78,78,78,52,78,-66,78,78,52,78,78,52,52,52,52,78,78,78,78,78,78,78,78,52,-65,78,78,78,78,78,-36,52,78,78,]),']':([22,23,25,26,27,29,30,31,32,43,44,45,46,47,48,49,50,51,52,57,58,59,61,63,65,66,67,68,69,70,73,74,75,76,77,78,81,87,88,89,90,91,95,102,108,109,110,111,115,119,120,127,133,135,145,146,156,157,158,159,162,163,166,171,172,173,178,185,186,190,191,196,199,],[53,-34,-21,-22,-23,-30,-31,-32,-33,-40,-41,-42,-52,88,-54,-55,-56,-57,-58,95,-25,-80,-59,-61,-67,-68,-69,-76,-77,-78,109,-82,-83,-84,-85,-86,-48,119,-43,120,-46,-24,-35,-88,145,-92,146,-96,-49,-53,-44,-62,-87,-89,-81,-93,-47,178,-27,-26,-63,-64,-79,-97,185,186,-45,-94,-95,-60,-74,-75,-70,]),',':([23,25,26,27,29,30,31,32,36,41,42,43,44,45,46,48,49,50,51,52,54,56,58,59,61,63,65,66,67,68,69,70,74,75,76,77,78,81,82,83,86,88,89,90,91,95,100,102,103,104,109,110,111,115,118,119,120,124,126,127,133,135,137,138,140,141,142,144,145,146,153,154,155,156,158,159,162,163,164,165,166,171,175,176,178,183,184,185,186,190,191,194,196,198,199,],[-34,-21,-22,-23,-30,-31,-32,-33,-20,85,-19,-40,-41,-42,-52,-54,-55,-56,-57,-58,92,94,-25,-80,-59,-61,-67,-68,-69,-76,-77,-78,-82,-83,-84,-85,-86,-48,116,117,-13,-43,121,-46,-24,-35,-59,-88,134,136,-92,147,-96,-49,-19,-53,-44,-29,-28,-62,-87,-89,147,-96,121,-46,169,-71,-81,-93,-51,-50,-14,-47,-27,-26,-63,-64,-90,-91,-79,-97,188,-37,-45,-72,-73,-94,-95,-60,-74,-38,-75,-39,-70,]),'IF':([35,62,64,73,105,107,128,130,134,136,147,148,149,167,169,170,179,181,193,195,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'COND':([35,62,64,73,79,96,98,101,105,107,113,128,130,131,134,136,147,148,149,160,167,169,170,179,181,187,193,195,],[72,72,72,72,72,72,-66,72,72,72,72,72,72,72,72,72,72,72,72,-65,72,72,72,72,72,-36,72,72,]),'|':([43,44,45,46,48,49,50,51,52,59,61,63,65,66,67,68,69,70,74,75,76,77,78,81,88,90,102,109,111,115,119,120,127,133,135,145,146,162,163,166,178,185,186,190,191,196,199,],[-40,-41,-42,-52,-54,-55,-56,-57,-58,-80,-59,-61,-67,-68,-69,-76,-77,-78,-82,-83,-84,-85,-86,-48,-43,122,-88,-92,148,-49,-53,-44,-62,-87,-89,-81,-93,-63,-64,-79,-45,-94,-95,-60,-74,-75,-70,]),'`':([59,61,63,64,65,66,67,68,69,70,74,75,76,77,78,100,102,109,112,127,129,133,135,145,146,151,162,163,166,185,186,191,196,199,],[-80,97,-61,97,-67,-68,-69,-76,-77,-78,-82,-83,-84,-85,-86,97,-88,-92,97,-62,160,-87,-89,-81,-93,97,-63,-64,-79,-94,-95,-74,-75,-70,]),'THEN':([59,61,63,65,66,67,68,69,70,74,75,76,77,78,99,102,109,127,133,135,145,146,162,163,166,185,186,190,191,196,199,],[-80,-59,-61,-67,-68,-69,-76,-77,-78,-82,-83,-84,-85,-86,130,-88,-92,-62,-87,-89,-81,-93,-63,-64,-79,-94,-95,-60,-74,-75,-70,]),'RANGER':([59,61,63,65,66,67,68,69,70,74,75,76,77,78,102,109,111,127,133,135,145,146,162,163,166,185,186,190,191,196,199,],[-80,-59,-61,-67,-68,-69,-76,-77,-78,-82,-83,-84,-85,-86,-88,-92,149,-62,-87,-89,-81,-93,-63,-64,-79,-94,-95,-60,-74,-75,-70,]),'}':([59,61,63,65,66,67,68,69,70,74,75,76,77,78,102,109,112,127,133,135,145,146,151,162,163,166,175,176,180,185,186,190,191,192,194,196,197,198,199,],[-80,-59,-61,-67,-68,-69,-76,-77,-78,-82,-83,-84,-85,-86,-88,-92,150,-62,-87,-89,-81,-93,174,-63,-64,-79,187,-37,191,-94,-95,-60,-74,196,-38,-75,199,-39,-70,]),'ELSE':([59,61,63,65,66,67,68,69,70,74,75,76,77,78,102,109,127,133,135,145,146,161,162,163,166,169,185,186,190,191,196,199,],[-80,-59,-61,-67,-68,-69,-76,-77,-78,-82,-83,-84,-85,-86,-88,-92,-62,-87,-89,-81,-93,179,-63,-64,-79,182,-94,-95,-60,-74,-75,-70,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'all':([0,],[1,]),'body':([2,],[4,]),'statement':([2,4,],[5,11,]),'function':([2,4,],[6,6,]),'prefix':([9,],[14,]),'annotation':([13,42,118,177,],[18,86,155,189,]),'args':([14,],[20,]),'typedesc':([17,19,28,33,38,123,125,],[24,36,55,57,80,158,159,]),'typeid':([17,19,28,33,38,92,94,123,125,],[25,25,56,25,25,124,126,25,25,]),'typeclass':([17,19,28,33,38,123,125,],[26,26,26,26,26,26,26,]),'function_type':([17,19,28,33,38,123,125,],[27,27,27,27,27,27,27,]),'returntype':([20,],[37,]),'arg_list':([21,],[41,]),'lpattern':([21,39,47,85,106,116,117,121,122,152,188,],[42,83,90,118,141,153,154,156,157,177,177,]),'lvar':([21,39,47,85,106,116,117,121,122,152,188,],[43,43,43,43,43,43,43,43,43,43,43,]),'llist':([21,39,47,85,106,116,117,121,122,152,188,],[44,44,44,44,44,44,44,44,44,44,44,]),'ltuple':([21,39,47,85,106,116,117,121,122,152,188,],[45,45,45,45,45,45,45,45,45,45,45,]),'tuple_type':([28,],[54,]),'conditional':([35,62,64,73,105,107,128,130,134,136,147,148,149,167,169,170,179,181,193,195,],[60,99,103,111,138,143,103,161,164,165,171,172,173,180,143,184,190,192,197,198,]),'compound':([35,62,64,73,79,105,107,113,128,130,134,136,147,148,149,167,169,170,179,181,193,195,],[61,61,100,61,112,61,61,151,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'expression':([35,62,64,73,79,96,101,105,107,113,128,130,131,134,136,147,148,149,167,169,170,179,181,193,195,],[63,63,63,63,63,127,132,63,63,63,63,63,127,63,63,63,63,63,63,63,63,63,63,63,63,]),'multivar':([35,62,64,73,79,96,101,105,107,113,128,130,131,134,136,147,148,149,167,169,170,179,181,193,195,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'lambda':([35,62,64,73,79,96,101,105,107,113,128,130,131,134,136,147,148,149,167,169,170,179,181,193,195,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'cond_block':([35,62,64,73,79,96,101,105,107,113,128,130,131,134,136,147,148,149,167,169,170,179,181,193,195,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'primaryvar':([35,62,64,73,79,96,101,105,107,113,128,130,131,134,136,147,148,149,167,169,170,179,181,193,195,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'rlist':([35,62,64,73,79,96,101,105,107,113,128,130,131,134,136,147,148,149,167,169,170,179,181,193,195,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'rtuple':([35,62,64,73,79,96,101,105,107,113,128,130,131,134,136,147,148,149,167,169,170,179,181,193,195,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'ltuple_cont':([39,],[82,]),'pattern_list':([47,106,],[89,140,]),'infix':([61,64,100,112,151,],[96,101,131,96,96,]),'rtuple_cont':([64,128,],[104,104,]),'condition_list':([73,105,],[110,137,]),'let_block':([79,],[113,]),'cond':([107,],[142,]),'cond_singl':([107,169,],[144,183,]),'let_cont':([152,],[175,]),'assign':([152,188,],[176,194,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> all","S'",1,None,None,None),
  ('all -> <empty>','all',0,'p_grammar_tester','tester.py',8),
  ('all -> BEGIN END','all',2,'p_grammar_tester','tester.py',9),
  ('all -> BEGIN body END','all',3,'p_grammar_tester','tester.py',10),
  ('body -> statement','body',1,'p_grammar_tester','tester.py',12),
  ('body -> body statement','body',2,'p_grammar_tester','tester.py',13),
  ('statement -> function','statement',1,'p_grammar_tester','tester.py',15),
  ('statement -> ALIAS ID = typedesc','statement',4,'p_grammar_tester','tester.py',16),
  ('statement -> LET ID annotation = conditional','statement',5,'p_grammar_tester','tester.py',17),
  ('function -> FDEF prefix args returntype { compound }','function',7,'p_grammar_tester','tester.py',19),
  ('function -> FDEF prefix args returntype { let_block compound }','function',8,'p_grammar_tester','tester.py',20),
  ('args -> ( )','args',2,'p_grammar_tester','tester.py',22),
  ('args -> ( arg_list )','args',3,'p_grammar_tester','tester.py',23),
  ('arg_list -> lpattern annotation','arg_list',2,'p_grammar_tester','tester.py',25),
  ('arg_list -> arg_list , lpattern annotation','arg_list',4,'p_grammar_tester','tester.py',26),
  ('prefix -> ID','prefix',1,'p_grammar_tester','tester.py',28),
  ('prefix -> [ SPECIALID ]','prefix',3,'p_grammar_tester','tester.py',29),
  ('returntype -> <empty>','returntype',0,'p_grammar_tester','tester.py',31),
  ('returntype -> RARROW typedesc','returntype',2,'p_grammar_tester','tester.py',32),
  ('annotation -> <empty>','annotation',0,'p_grammar_tester','tester.py',34),
  ('annotation -> : typedesc','annotation',2,'p_grammar_tester','tester.py',35),
  ('typedesc -> typeid','typedesc',1,'p_grammar_tester','tester.py',37),
  ('typedesc -> typeclass','typedesc',1,'p_grammar_tester','tester.py',38),
  ('typedesc -> function_type','typedesc',1,'p_grammar_tester','tester.py',39),
  ('typedesc -> ( tuple_type )','typedesc',3,'p_grammar_tester','tester.py',40),
  ('typeclass -> TYPECLASS ID','typeclass',2,'p_grammar_tester','tester.py',42),
  ('function_type -> ( typedesc ) RARROW typedesc','function_type',5,'p_grammar_tester','tester.py',44),
  ('function_type -> ( tuple_type ) RARROW typedesc','function_type',5,'p_grammar_tester','tester.py',45),
  ('tuple_type -> typeid , typeid','tuple_type',3,'p_grammar_tester','tester.py',47),
  ('tuple_type -> tuple_type , typeid','tuple_type',3,'p_grammar_tester','tester.py',48),
  ('typeid -> INT','typeid',1,'p_grammar_tester','tester.py',50),
  ('typeid -> FLOAT','typeid',1,'p_grammar_tester','tester.py',51),
  ('typeid -> CHAR','typeid',1,'p_grammar_tester','tester.py',52),
  ('typeid -> BOOL','typeid',1,'p_grammar_tester','tester.py',53),
  ('typeid -> ID','typeid',1,'p_grammar_tester','tester.py',54),
  ('typeid -> [ typedesc ]','typeid',3,'p_grammar_tester','tester.py',55),
  ('let_block -> LET { let_cont }','let_block',4,'p_grammar_tester','tester.py',57),
  ('let_cont -> assign','let_cont',1,'p_grammar_tester','tester.py',59),
  ('let_cont -> let_cont , assign','let_cont',3,'p_grammar_tester','tester.py',60),
  ('assign -> lpattern annotation = conditional','assign',4,'p_grammar_tester','tester.py',62),
  ('lpattern -> lvar','lpattern',1,'p_grammar_tester','tester.py',64),
  ('lpattern -> llist','lpattern',1,'p_grammar_tester','tester.py',65),
  ('lpattern -> ltuple','lpattern',1,'p_grammar_tester','tester.py',66),
  ('llist -> [ ]','llist',2,'p_grammar_tester','tester.py',68),
  ('llist -> [ pattern_list ]','llist',3,'p_grammar_tester','tester.py',69),
  ('llist -> [ lpattern | lpattern ]','llist',5,'p_grammar_tester','tester.py',70),
  ('pattern_list -> lpattern','pattern_list',1,'p_grammar_tester','tester.py',72),
  ('pattern_list -> pattern_list , lpattern','pattern_list',3,'p_grammar_tester','tester.py',73),
  ('ltuple -> ( )','ltuple',2,'p_grammar_tester','tester.py',75),
  ('ltuple -> ( ltuple_cont )','ltuple',3,'p_grammar_tester','tester.py',76),
  ('ltuple_cont -> lpattern , lpattern','ltuple_cont',3,'p_grammar_tester','tester.py',78),
  ('ltuple_cont -> ltuple_cont , lpattern','ltuple_cont',3,'p_grammar_tester','tester.py',79),
  ('lvar -> ID','lvar',1,'p_grammar_tester','tester.py',81),
  ('lvar -> [ SPECIALID ]','lvar',3,'p_grammar_tester','tester.py',82),
  ('lvar -> STRINGT','lvar',1,'p_grammar_tester','tester.py',83),
  ('lvar -> INTT','lvar',1,'p_grammar_tester','tester.py',84),
  ('lvar -> FLOATT','lvar',1,'p_grammar_tester','tester.py',85),
  ('lvar -> CHART','lvar',1,'p_grammar_tester','tester.py',86),
  ('lvar -> BOOLT','lvar',1,'p_grammar_tester','tester.py',87),
  ('conditional -> compound','conditional',1,'p_grammar_tester','tester.py',89),
  ('conditional -> IF conditional THEN conditional ELSE conditional','conditional',6,'p_grammar_tester','tester.py',90),
  ('compound -> expression','compound',1,'p_grammar_tester','tester.py',92),
  ('compound -> compound infix expression','compound',3,'p_grammar_tester','tester.py',93),
  ('compound -> ( compound infix )','compound',4,'p_grammar_tester','tester.py',94),
  ('compound -> ( infix expression )','compound',4,'p_grammar_tester','tester.py',95),
  ('infix -> ` ID `','infix',3,'p_grammar_tester','tester.py',97),
  ('infix -> SPECIALID','infix',1,'p_grammar_tester','tester.py',98),
  ('expression -> multivar','expression',1,'p_grammar_tester','tester.py',100),
  ('expression -> lambda','expression',1,'p_grammar_tester','tester.py',101),
  ('expression -> cond_block','expression',1,'p_grammar_tester','tester.py',102),
  ('cond_block -> COND { cond , ELSE : conditional }','cond_block',8,'p_grammar_tester','tester.py',104),
  ('cond -> cond_singl','cond',1,'p_grammar_tester','tester.py',106),
  ('cond -> cond , cond_singl','cond',3,'p_grammar_tester','tester.py',107),
  ('cond_singl -> conditional : conditional','cond_singl',3,'p_grammar_tester','tester.py',109),
  ('lambda -> FDEF ( ) { conditional }','lambda',6,'p_grammar_tester','tester.py',111),
  ('lambda -> FDEF ( pattern_list ) { conditional }','lambda',7,'p_grammar_tester','tester.py',112),
  ('multivar -> primaryvar','multivar',1,'p_grammar_tester','tester.py',114),
  ('multivar -> rlist','multivar',1,'p_grammar_tester','tester.py',115),
  ('multivar -> rtuple','multivar',1,'p_grammar_tester','tester.py',116),
  ('multivar -> multivar ( condition_list )','multivar',4,'p_grammar_tester','tester.py',117),
  ('primaryvar -> ID','primaryvar',1,'p_grammar_tester','tester.py',119),
  ('primaryvar -> [ SPECIALID ]','primaryvar',3,'p_grammar_tester','tester.py',120),
  ('primaryvar -> INTT','primaryvar',1,'p_grammar_tester','tester.py',121),
  ('primaryvar -> FLOATT','primaryvar',1,'p_grammar_tester','tester.py',122),
  ('primaryvar -> CHART','primaryvar',1,'p_grammar_tester','tester.py',123),
  ('primaryvar -> STRINGT','primaryvar',1,'p_grammar_tester','tester.py',124),
  ('primaryvar -> BOOLT','primaryvar',1,'p_grammar_tester','tester.py',125),
  ('primaryvar -> ( conditional )','primaryvar',3,'p_grammar_tester','tester.py',126),
  ('rtuple -> ( )','rtuple',2,'p_grammar_tester','tester.py',128),
  ('rtuple -> ( rtuple_cont )','rtuple',3,'p_grammar_tester','tester.py',129),
  ('rtuple_cont -> conditional , conditional','rtuple_cont',3,'p_grammar_tester','tester.py',131),
  ('rtuple_cont -> rtuple_cont , conditional','rtuple_cont',3,'p_grammar_tester','tester.py',132),
  ('rlist -> [ ]','rlist',2,'p_grammar_tester','tester.py',134),
  ('rlist -> [ condition_list ]','rlist',3,'p_grammar_tester','tester.py',135),
  ('rlist -> [ conditional | conditional ]','rlist',5,'p_grammar_tester','tester.py',136),
  ('rlist -> [ conditional RANGER conditional ]','rlist',5,'p_grammar_tester','tester.py',137),
  ('condition_list -> conditional','condition_list',1,'p_grammar_tester','tester.py',139),
  ('condition_list -> condition_list , conditional','condition_list',3,'p_grammar_tester','tester.py',140),
]
