
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ALIAS BEGIN BOOL BOOLT CHAR CHART COND ELSE END FDEF FLOAT FLOATT ID IF INT INTT LET RANGER RARROW SPECIALID STRINGT THEN TYPECLASS\n    all             : \n                    | BEGIN END\n                    | BEGIN body END\n\n    body            : statement\n                    | body statement\n\n    statement       : function\n                    | ALIAS ID '=' typedesc\n                    | LET ID annotation '=' conditional\n\n    function        : FDEF prefix args returntype '{' compound '}'\n                    | FDEF prefix args returntype '{' let_block compound '}'\n\n    args            : '(' ')'\n                    | '(' arg_list ')'\n\n    arg_list        : lpattern annotation\n                    | arg_list ',' lpattern annotation\n\n    prefix          : ID\n                    | '[' SPECIALID ']'\n\n    returntype      : \n                    | RARROW typedesc\n\n    let_block       : LET '{' let_cont '}'\n\n    let_cont        : assign\n                    | let_cont ',' assign\n\n    assign          : lpattern annotation '=' conditional\n\n    lpattern        : lvar\n                    | llist\n                    | ltuple\n\n    annotation      : \n                    | ':' typedesc\n\n    typedesc        : typeid\n                    | typeclass\n                    | function_type\n                    | '(' tuple_type ')'\n    \n    typeclass       : TYPECLASS ID\n\n    function_type   : '(' ')' RARROW typedesc\n                    | '(' typedesc ')' RARROW typedesc\n                    | '(' tuple_type ')' RARROW typedesc\n\n    tuple_type      : typeid ',' typeid\n                    | tuple_type ',' typeid\n    \n    typeid          : INT\n                    | FLOAT\n                    | CHAR\n                    | BOOL\n                    | ID\n                    | '[' typedesc ']'\n\n    llist           : '[' ']'\n                    | '[' pattern_list ']'\n                    | '[' lpattern '|' lpattern ']'\n\n    pattern_list    : lpattern\n                    | pattern_list ',' lpattern\n\n    ltuple          : '(' ')'\n                    | '(' ltuple_cont ')'\n\n    ltuple_cont     : lpattern ',' lpattern\n                    | ltuple_cont ',' lpattern\n\n    lvar            : ID\n                    | '[' SPECIALID ']'\n                    | STRINGT\n                    | INTT\n                    | FLOATT\n                    | CHART\n                    | BOOLT\n                    | '(' lpattern ')'\n\n    conditional     : compound\n                    | IF conditional THEN conditional ELSE conditional\n\n    compound        : expression\n                    | compound infix expression\n                    | '(' compound infix ')'\n                    | '(' infix expression ')'\n\n    infix           : '`' ID '`'\n                    | SPECIALID\n\n    expression      : multivar\n                    | lambda\n                    | cond_block\n\n    cond_block      : COND '{' cond ',' ELSE ':' conditional '}'\n\n    cond            : cond_singl\n                    | cond ',' cond_singl\n\n    cond_singl      : conditional ':' conditional\n\n    lambda          : FDEF '(' ')' '{' conditional '}' \n                    | FDEF '(' pattern_list ')' '{' conditional '}'\n\n    multivar        : primaryvar\n                    | rlist\n                    | rtuple\n                    | multivar '(' condition_list ')'\n\n    primaryvar      : ID\n                    | '[' SPECIALID ']'\n                    | INTT\n                    | FLOATT\n                    | CHART\n                    | BOOLT\n                    | '(' conditional ')'\n\n    rtuple          : '(' ')'\n                    | '(' rtuple_cont ')'\n\n    rtuple_cont     : conditional ',' conditional\n                    | rtuple_cont ',' conditional\n\n    rlist           : '[' ']'\n                    | '[' condition_list ']'\n                    | '[' conditional '|' conditional ']'\n                    | '[' conditional RANGER conditional ']'\n\n    condition_list  : conditional\n                    | condition_list ',' conditional\n    "
    
_lr_action_items = {'$end':([0,1,3,10,],[-1,0,-2,-3,]),'BEGIN':([0,],[2,]),'END':([2,4,5,6,11,23,24,25,26,27,29,30,31,32,59,60,61,62,64,66,67,68,69,70,71,75,76,77,78,91,96,103,110,127,130,136,138,148,149,153,161,162,165,166,169,177,188,189,193,194,199,202,],[3,10,-4,-6,-5,-42,-7,-28,-29,-30,-38,-39,-40,-41,-32,-82,-8,-61,-63,-69,-70,-71,-78,-79,-80,-84,-85,-86,-87,-31,-43,-89,-93,-33,-64,-88,-90,-83,-94,-9,-35,-34,-65,-66,-81,-10,-95,-96,-62,-76,-77,-72,]),'ALIAS':([2,4,5,6,11,23,24,25,26,27,29,30,31,32,59,60,61,62,64,66,67,68,69,70,71,75,76,77,78,91,96,103,110,127,130,136,138,148,149,153,161,162,165,166,169,177,188,189,193,194,199,202,],[7,7,-4,-6,-5,-42,-7,-28,-29,-30,-38,-39,-40,-41,-32,-82,-8,-61,-63,-69,-70,-71,-78,-79,-80,-84,-85,-86,-87,-31,-43,-89,-93,-33,-64,-88,-90,-83,-94,-9,-35,-34,-65,-66,-81,-10,-95,-96,-62,-76,-77,-72,]),'LET':([2,4,5,6,11,23,24,25,26,27,29,30,31,32,59,60,61,62,64,66,67,68,69,70,71,75,76,77,78,79,91,96,103,110,127,130,136,138,148,149,153,161,162,165,166,169,177,188,189,193,194,199,202,],[8,8,-4,-6,-5,-42,-7,-28,-29,-30,-38,-39,-40,-41,-32,-82,-8,-61,-63,-69,-70,-71,-78,-79,-80,-84,-85,-86,-87,115,-31,-43,-89,-93,-33,-64,-88,-90,-83,-94,-9,-35,-34,-65,-66,-81,-10,-95,-96,-62,-76,-77,-72,]),'FDEF':([2,4,5,6,11,23,24,25,26,27,29,30,31,32,35,59,60,61,62,63,64,65,66,67,68,69,70,71,74,75,76,77,78,79,91,96,97,99,102,103,106,108,110,114,127,130,131,133,134,136,137,138,139,148,149,150,151,152,153,161,162,163,165,166,169,170,172,173,177,182,184,188,189,190,193,194,196,198,199,202,],[9,9,-4,-6,-5,-42,-7,-28,-29,-30,-38,-39,-40,-41,72,-32,-82,-8,-61,72,-63,72,-69,-70,-71,-78,-79,-80,72,-84,-85,-86,-87,72,-31,-43,72,-68,72,-89,72,72,-93,72,-33,-64,72,72,72,-88,72,-90,72,-83,-94,72,72,72,-9,-35,-34,-67,-65,-66,-81,72,72,72,-10,72,72,-95,-96,-19,-62,-76,72,72,-77,-72,]),'ID':([7,8,9,17,19,21,28,33,34,35,38,39,47,63,65,74,79,85,92,93,95,97,98,99,102,106,107,108,114,117,119,123,124,125,128,131,133,134,137,139,150,151,152,155,163,170,172,173,182,184,190,191,196,198,],[12,13,15,23,23,46,23,23,59,60,23,46,46,60,60,60,60,46,23,23,23,60,132,-68,60,60,46,60,60,46,46,46,46,23,23,60,60,60,60,60,60,60,60,46,-67,60,60,60,60,60,-19,46,60,60,]),'[':([9,17,19,21,28,33,35,38,39,47,63,65,74,79,85,92,93,95,97,99,102,106,107,108,114,117,119,123,124,125,128,131,133,134,137,139,150,151,152,155,163,170,172,173,182,184,190,191,196,198,],[16,33,33,47,33,33,74,33,47,47,74,74,74,74,47,33,33,33,74,-68,74,74,47,74,74,47,47,47,47,33,33,74,74,74,74,74,74,74,74,47,-67,74,74,74,74,74,-19,47,74,74,]),'=':([12,13,18,23,25,26,27,29,30,31,32,36,43,44,45,46,48,49,50,51,52,59,82,88,91,96,116,118,121,122,127,161,162,180,181,192,],[17,-26,35,-42,-28,-29,-30,-38,-39,-40,-41,-27,-23,-24,-25,-53,-55,-56,-57,-58,-59,-32,-49,-44,-31,-43,-60,-50,-54,-45,-33,-35,-34,-26,-46,198,]),':':([13,42,43,44,45,46,48,49,50,51,52,60,62,64,66,67,68,69,70,71,75,76,77,78,82,88,103,110,116,118,120,121,122,130,136,138,146,148,149,165,166,169,180,181,185,188,189,193,194,199,202,],[19,19,-23,-24,-25,-53,-55,-56,-57,-58,-59,-82,-61,-63,-69,-70,-71,-78,-79,-80,-84,-85,-86,-87,-49,-44,-89,-93,-60,-50,19,-54,-45,-64,-88,-90,173,-83,-94,-65,-66,-81,19,-46,196,-95,-96,-62,-76,-77,-72,]),'(':([14,15,17,19,21,28,33,35,38,39,47,53,60,63,65,66,69,70,71,72,74,75,76,77,78,79,85,93,97,99,102,103,106,107,108,110,114,117,119,123,124,125,128,131,133,134,136,137,138,139,148,149,150,151,152,155,163,169,170,172,173,182,184,188,189,190,191,196,198,],[21,-15,28,28,39,28,28,65,28,39,39,-16,-82,65,65,106,-78,-79,-80,107,65,-84,-85,-86,-87,65,39,28,131,-68,131,-89,65,39,65,-93,65,39,39,39,39,28,28,65,65,131,-88,65,-90,65,-83,-94,65,65,65,39,-67,-81,65,65,65,65,65,-95,-96,-19,39,65,65,]),'SPECIALID':([16,47,60,62,64,65,66,67,68,69,70,71,74,75,76,77,78,101,103,110,113,130,136,138,148,149,154,165,166,169,188,189,194,199,202,],[22,87,-82,99,-63,99,-69,-70,-71,-78,-79,-80,109,-84,-85,-86,-87,99,-89,-93,99,-64,-88,-90,-83,-94,99,-65,-66,-81,-95,-96,-76,-77,-72,]),'INT':([17,19,28,33,38,92,93,95,125,128,],[29,29,29,29,29,29,29,29,29,29,]),'FLOAT':([17,19,28,33,38,92,93,95,125,128,],[30,30,30,30,30,30,30,30,30,30,]),'CHAR':([17,19,28,33,38,92,93,95,125,128,],[31,31,31,31,31,31,31,31,31,31,]),'BOOL':([17,19,28,33,38,92,93,95,125,128,],[32,32,32,32,32,32,32,32,32,32,]),'TYPECLASS':([17,19,28,33,38,93,125,128,],[34,34,34,34,34,34,34,34,]),'{':([20,23,25,26,27,29,30,31,32,37,40,59,73,80,84,91,96,115,127,142,161,162,171,],[-17,-42,-28,-29,-30,-38,-39,-40,-41,79,-11,-32,108,-18,-12,-31,-43,155,-33,170,-35,-34,184,]),'RARROW':([20,40,55,84,91,94,],[38,-11,93,-12,125,128,]),')':([21,23,25,26,27,28,29,30,31,32,36,39,41,42,43,44,45,46,48,49,50,51,52,54,56,57,59,60,62,64,65,66,67,68,69,70,71,75,76,77,78,81,82,83,86,88,91,96,99,101,103,104,105,107,110,116,118,120,121,122,126,127,129,130,131,134,135,136,138,140,141,143,144,148,149,156,157,158,159,161,162,163,165,166,167,168,169,174,181,188,189,193,194,199,202,],[40,-42,-28,-29,-30,55,-38,-39,-40,-41,-27,82,84,-26,-23,-24,-25,-53,-55,-56,-57,-58,-59,91,94,-28,-32,-82,-61,-63,103,-69,-70,-71,-78,-79,-80,-84,-85,-86,-87,116,-49,118,-13,-44,-31,-43,-68,-61,-89,136,138,142,-93,-60,-50,-26,-54,-45,-37,-33,-36,-64,103,165,166,-88,-90,169,-97,171,-47,-83,-94,-51,-52,-14,-48,-35,-34,-67,-65,-66,-91,-92,-81,-98,-46,-95,-96,-62,-76,-77,-72,]),'STRINGT':([21,39,47,85,107,117,119,123,124,155,191,],[48,48,48,48,48,48,48,48,48,48,48,]),'INTT':([21,35,39,47,63,65,74,79,85,97,99,102,106,107,108,114,117,119,123,124,131,133,134,137,139,150,151,152,155,163,170,172,173,182,184,190,191,196,198,],[49,75,49,49,75,75,75,75,49,75,-68,75,75,49,75,75,49,49,49,49,75,75,75,75,75,75,75,75,49,-67,75,75,75,75,75,-19,49,75,75,]),'FLOATT':([21,35,39,47,63,65,74,79,85,97,99,102,106,107,108,114,117,119,123,124,131,133,134,137,139,150,151,152,155,163,170,172,173,182,184,190,191,196,198,],[50,76,50,50,76,76,76,76,50,76,-68,76,76,50,76,76,50,50,50,50,76,76,76,76,76,76,76,76,50,-67,76,76,76,76,76,-19,50,76,76,]),'CHART':([21,35,39,47,63,65,74,79,85,97,99,102,106,107,108,114,117,119,123,124,131,133,134,137,139,150,151,152,155,163,170,172,173,182,184,190,191,196,198,],[51,77,51,51,77,77,77,77,51,77,-68,77,77,51,77,77,51,51,51,51,77,77,77,77,77,77,77,77,51,-67,77,77,77,77,77,-19,51,77,77,]),'BOOLT':([21,35,39,47,63,65,74,79,85,97,99,102,106,107,108,114,117,119,123,124,131,133,134,137,139,150,151,152,155,163,170,172,173,182,184,190,191,196,198,],[52,78,52,52,78,78,78,78,52,78,-68,78,78,52,78,78,52,52,52,52,78,78,78,78,78,78,78,78,52,-67,78,78,78,78,78,-19,52,78,78,]),']':([22,23,25,26,27,29,30,31,32,43,44,45,46,47,48,49,50,51,52,58,59,60,62,64,66,67,68,69,70,71,74,75,76,77,78,82,87,88,89,90,91,96,103,109,110,111,112,116,118,121,122,127,130,136,138,148,149,159,160,161,162,165,166,169,174,175,176,181,188,189,193,194,199,202,],[53,-42,-28,-29,-30,-38,-39,-40,-41,-23,-24,-25,-53,88,-55,-56,-57,-58,-59,96,-32,-82,-61,-63,-69,-70,-71,-78,-79,-80,110,-84,-85,-86,-87,-49,121,-44,122,-47,-31,-43,-89,148,-93,149,-97,-60,-50,-54,-45,-33,-64,-88,-90,-83,-94,-48,181,-35,-34,-65,-66,-81,-98,188,189,-46,-95,-96,-62,-76,-77,-72,]),',':([23,25,26,27,29,30,31,32,36,41,42,43,44,45,46,48,49,50,51,52,54,57,59,60,62,64,66,67,68,69,70,71,75,76,77,78,81,82,83,86,88,89,90,91,96,101,103,104,105,110,111,112,116,118,120,121,122,126,127,129,130,136,138,140,141,143,144,145,147,148,149,156,157,158,159,161,162,165,166,167,168,169,174,178,179,181,186,187,188,189,193,194,197,199,201,202,],[-42,-28,-29,-30,-38,-39,-40,-41,-27,85,-26,-23,-24,-25,-53,-55,-56,-57,-58,-59,92,95,-32,-82,-61,-63,-69,-70,-71,-78,-79,-80,-84,-85,-86,-87,117,-49,119,-13,-44,123,-47,-31,-43,-61,-89,137,139,-93,150,-97,-60,-50,-26,-54,-45,-37,-33,-36,-64,-88,-90,150,-97,123,-47,172,-73,-83,-94,-51,-52,-14,-48,-35,-34,-65,-66,-91,-92,-81,-98,191,-20,-46,-74,-75,-95,-96,-62,-76,-21,-77,-22,-72,]),'IF':([35,63,65,74,106,108,131,133,137,139,150,151,152,170,172,173,182,184,196,198,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'COND':([35,63,65,74,79,97,99,102,106,108,114,131,133,134,137,139,150,151,152,163,170,172,173,182,184,190,196,198,],[73,73,73,73,73,73,-68,73,73,73,73,73,73,73,73,73,73,73,73,-67,73,73,73,73,73,-19,73,73,]),'|':([43,44,45,46,48,49,50,51,52,60,62,64,66,67,68,69,70,71,75,76,77,78,82,88,90,103,110,112,116,118,121,122,130,136,138,148,149,165,166,169,181,188,189,193,194,199,202,],[-23,-24,-25,-53,-55,-56,-57,-58,-59,-82,-61,-63,-69,-70,-71,-78,-79,-80,-84,-85,-86,-87,-49,-44,124,-89,-93,151,-60,-50,-54,-45,-64,-88,-90,-83,-94,-65,-66,-81,-46,-95,-96,-62,-76,-77,-72,]),'`':([60,62,64,65,66,67,68,69,70,71,75,76,77,78,101,103,110,113,130,132,136,138,148,149,154,165,166,169,188,189,194,199,202,],[-82,98,-63,98,-69,-70,-71,-78,-79,-80,-84,-85,-86,-87,98,-89,-93,98,-64,163,-88,-90,-83,-94,98,-65,-66,-81,-95,-96,-76,-77,-72,]),'THEN':([60,62,64,66,67,68,69,70,71,75,76,77,78,100,103,110,130,136,138,148,149,165,166,169,188,189,193,194,199,202,],[-82,-61,-63,-69,-70,-71,-78,-79,-80,-84,-85,-86,-87,133,-89,-93,-64,-88,-90,-83,-94,-65,-66,-81,-95,-96,-62,-76,-77,-72,]),'RANGER':([60,62,64,66,67,68,69,70,71,75,76,77,78,103,110,112,130,136,138,148,149,165,166,169,188,189,193,194,199,202,],[-82,-61,-63,-69,-70,-71,-78,-79,-80,-84,-85,-86,-87,-89,-93,152,-64,-88,-90,-83,-94,-65,-66,-81,-95,-96,-62,-76,-77,-72,]),'}':([60,62,64,66,67,68,69,70,71,75,76,77,78,103,110,113,130,136,138,148,149,154,165,166,169,178,179,183,188,189,193,194,195,197,199,200,201,202,],[-82,-61,-63,-69,-70,-71,-78,-79,-80,-84,-85,-86,-87,-89,-93,153,-64,-88,-90,-83,-94,177,-65,-66,-81,190,-20,194,-95,-96,-62,-76,199,-21,-77,202,-22,-72,]),'ELSE':([60,62,64,66,67,68,69,70,71,75,76,77,78,103,110,130,136,138,148,149,164,165,166,169,172,188,189,193,194,199,202,],[-82,-61,-63,-69,-70,-71,-78,-79,-80,-84,-85,-86,-87,-89,-93,-64,-88,-90,-83,-94,182,-65,-66,-81,185,-95,-96,-62,-76,-77,-72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'all':([0,],[1,]),'body':([2,],[4,]),'statement':([2,4,],[5,11,]),'function':([2,4,],[6,6,]),'prefix':([9,],[14,]),'annotation':([13,42,120,180,],[18,86,158,192,]),'args':([14,],[20,]),'typedesc':([17,19,28,33,38,93,125,128,],[24,36,56,58,80,127,161,162,]),'typeid':([17,19,28,33,38,92,93,95,125,128,],[25,25,57,25,25,126,25,129,25,25,]),'typeclass':([17,19,28,33,38,93,125,128,],[26,26,26,26,26,26,26,26,]),'function_type':([17,19,28,33,38,93,125,128,],[27,27,27,27,27,27,27,27,]),'returntype':([20,],[37,]),'arg_list':([21,],[41,]),'lpattern':([21,39,47,85,107,117,119,123,124,155,191,],[42,81,90,120,144,156,157,159,160,180,180,]),'lvar':([21,39,47,85,107,117,119,123,124,155,191,],[43,43,43,43,43,43,43,43,43,43,43,]),'llist':([21,39,47,85,107,117,119,123,124,155,191,],[44,44,44,44,44,44,44,44,44,44,44,]),'ltuple':([21,39,47,85,107,117,119,123,124,155,191,],[45,45,45,45,45,45,45,45,45,45,45,]),'tuple_type':([28,],[54,]),'conditional':([35,63,65,74,106,108,131,133,137,139,150,151,152,170,172,173,182,184,196,198,],[61,100,104,112,141,146,104,164,167,168,174,175,176,183,146,187,193,195,200,201,]),'compound':([35,63,65,74,79,106,108,114,131,133,137,139,150,151,152,170,172,173,182,184,196,198,],[62,62,101,62,113,62,62,154,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'expression':([35,63,65,74,79,97,102,106,108,114,131,133,134,137,139,150,151,152,170,172,173,182,184,196,198,],[64,64,64,64,64,130,135,64,64,64,64,64,130,64,64,64,64,64,64,64,64,64,64,64,64,]),'multivar':([35,63,65,74,79,97,102,106,108,114,131,133,134,137,139,150,151,152,170,172,173,182,184,196,198,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'lambda':([35,63,65,74,79,97,102,106,108,114,131,133,134,137,139,150,151,152,170,172,173,182,184,196,198,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'cond_block':([35,63,65,74,79,97,102,106,108,114,131,133,134,137,139,150,151,152,170,172,173,182,184,196,198,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'primaryvar':([35,63,65,74,79,97,102,106,108,114,131,133,134,137,139,150,151,152,170,172,173,182,184,196,198,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'rlist':([35,63,65,74,79,97,102,106,108,114,131,133,134,137,139,150,151,152,170,172,173,182,184,196,198,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'rtuple':([35,63,65,74,79,97,102,106,108,114,131,133,134,137,139,150,151,152,170,172,173,182,184,196,198,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'ltuple_cont':([39,],[83,]),'pattern_list':([47,107,],[89,143,]),'infix':([62,65,101,113,154,],[97,102,134,97,97,]),'rtuple_cont':([65,131,],[105,105,]),'condition_list':([74,106,],[111,140,]),'let_block':([79,],[114,]),'cond':([108,],[145,]),'cond_singl':([108,172,],[147,186,]),'let_cont':([155,],[178,]),'assign':([155,191,],[179,197,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> all","S'",1,None,None,None),
  ('all -> <empty>','all',0,'p_grammar_tester','tester.py',8),
  ('all -> BEGIN END','all',2,'p_grammar_tester','tester.py',9),
  ('all -> BEGIN body END','all',3,'p_grammar_tester','tester.py',10),
  ('body -> statement','body',1,'p_grammar_tester','tester.py',12),
  ('body -> body statement','body',2,'p_grammar_tester','tester.py',13),
  ('statement -> function','statement',1,'p_grammar_tester','tester.py',15),
  ('statement -> ALIAS ID = typedesc','statement',4,'p_grammar_tester','tester.py',16),
  ('statement -> LET ID annotation = conditional','statement',5,'p_grammar_tester','tester.py',17),
  ('function -> FDEF prefix args returntype { compound }','function',7,'p_grammar_tester','tester.py',19),
  ('function -> FDEF prefix args returntype { let_block compound }','function',8,'p_grammar_tester','tester.py',20),
  ('args -> ( )','args',2,'p_grammar_tester','tester.py',22),
  ('args -> ( arg_list )','args',3,'p_grammar_tester','tester.py',23),
  ('arg_list -> lpattern annotation','arg_list',2,'p_grammar_tester','tester.py',25),
  ('arg_list -> arg_list , lpattern annotation','arg_list',4,'p_grammar_tester','tester.py',26),
  ('prefix -> ID','prefix',1,'p_grammar_tester','tester.py',28),
  ('prefix -> [ SPECIALID ]','prefix',3,'p_grammar_tester','tester.py',29),
  ('returntype -> <empty>','returntype',0,'p_grammar_tester','tester.py',31),
  ('returntype -> RARROW typedesc','returntype',2,'p_grammar_tester','tester.py',32),
  ('let_block -> LET { let_cont }','let_block',4,'p_grammar_tester','tester.py',34),
  ('let_cont -> assign','let_cont',1,'p_grammar_tester','tester.py',36),
  ('let_cont -> let_cont , assign','let_cont',3,'p_grammar_tester','tester.py',37),
  ('assign -> lpattern annotation = conditional','assign',4,'p_grammar_tester','tester.py',39),
  ('lpattern -> lvar','lpattern',1,'p_grammar_tester','tester.py',41),
  ('lpattern -> llist','lpattern',1,'p_grammar_tester','tester.py',42),
  ('lpattern -> ltuple','lpattern',1,'p_grammar_tester','tester.py',43),
  ('annotation -> <empty>','annotation',0,'p_grammar_tester','tester.py',45),
  ('annotation -> : typedesc','annotation',2,'p_grammar_tester','tester.py',46),
  ('typedesc -> typeid','typedesc',1,'p_grammar_tester','tester.py',48),
  ('typedesc -> typeclass','typedesc',1,'p_grammar_tester','tester.py',49),
  ('typedesc -> function_type','typedesc',1,'p_grammar_tester','tester.py',50),
  ('typedesc -> ( tuple_type )','typedesc',3,'p_grammar_tester','tester.py',51),
  ('typeclass -> TYPECLASS ID','typeclass',2,'p_grammar_tester','tester.py',53),
  ('function_type -> ( ) RARROW typedesc','function_type',4,'p_grammar_tester','tester.py',55),
  ('function_type -> ( typedesc ) RARROW typedesc','function_type',5,'p_grammar_tester','tester.py',56),
  ('function_type -> ( tuple_type ) RARROW typedesc','function_type',5,'p_grammar_tester','tester.py',57),
  ('tuple_type -> typeid , typeid','tuple_type',3,'p_grammar_tester','tester.py',59),
  ('tuple_type -> tuple_type , typeid','tuple_type',3,'p_grammar_tester','tester.py',60),
  ('typeid -> INT','typeid',1,'p_grammar_tester','tester.py',62),
  ('typeid -> FLOAT','typeid',1,'p_grammar_tester','tester.py',63),
  ('typeid -> CHAR','typeid',1,'p_grammar_tester','tester.py',64),
  ('typeid -> BOOL','typeid',1,'p_grammar_tester','tester.py',65),
  ('typeid -> ID','typeid',1,'p_grammar_tester','tester.py',66),
  ('typeid -> [ typedesc ]','typeid',3,'p_grammar_tester','tester.py',67),
  ('llist -> [ ]','llist',2,'p_grammar_tester','tester.py',69),
  ('llist -> [ pattern_list ]','llist',3,'p_grammar_tester','tester.py',70),
  ('llist -> [ lpattern | lpattern ]','llist',5,'p_grammar_tester','tester.py',71),
  ('pattern_list -> lpattern','pattern_list',1,'p_grammar_tester','tester.py',73),
  ('pattern_list -> pattern_list , lpattern','pattern_list',3,'p_grammar_tester','tester.py',74),
  ('ltuple -> ( )','ltuple',2,'p_grammar_tester','tester.py',76),
  ('ltuple -> ( ltuple_cont )','ltuple',3,'p_grammar_tester','tester.py',77),
  ('ltuple_cont -> lpattern , lpattern','ltuple_cont',3,'p_grammar_tester','tester.py',79),
  ('ltuple_cont -> ltuple_cont , lpattern','ltuple_cont',3,'p_grammar_tester','tester.py',80),
  ('lvar -> ID','lvar',1,'p_grammar_tester','tester.py',82),
  ('lvar -> [ SPECIALID ]','lvar',3,'p_grammar_tester','tester.py',83),
  ('lvar -> STRINGT','lvar',1,'p_grammar_tester','tester.py',84),
  ('lvar -> INTT','lvar',1,'p_grammar_tester','tester.py',85),
  ('lvar -> FLOATT','lvar',1,'p_grammar_tester','tester.py',86),
  ('lvar -> CHART','lvar',1,'p_grammar_tester','tester.py',87),
  ('lvar -> BOOLT','lvar',1,'p_grammar_tester','tester.py',88),
  ('lvar -> ( lpattern )','lvar',3,'p_grammar_tester','tester.py',89),
  ('conditional -> compound','conditional',1,'p_grammar_tester','tester.py',91),
  ('conditional -> IF conditional THEN conditional ELSE conditional','conditional',6,'p_grammar_tester','tester.py',92),
  ('compound -> expression','compound',1,'p_grammar_tester','tester.py',94),
  ('compound -> compound infix expression','compound',3,'p_grammar_tester','tester.py',95),
  ('compound -> ( compound infix )','compound',4,'p_grammar_tester','tester.py',96),
  ('compound -> ( infix expression )','compound',4,'p_grammar_tester','tester.py',97),
  ('infix -> ` ID `','infix',3,'p_grammar_tester','tester.py',99),
  ('infix -> SPECIALID','infix',1,'p_grammar_tester','tester.py',100),
  ('expression -> multivar','expression',1,'p_grammar_tester','tester.py',102),
  ('expression -> lambda','expression',1,'p_grammar_tester','tester.py',103),
  ('expression -> cond_block','expression',1,'p_grammar_tester','tester.py',104),
  ('cond_block -> COND { cond , ELSE : conditional }','cond_block',8,'p_grammar_tester','tester.py',106),
  ('cond -> cond_singl','cond',1,'p_grammar_tester','tester.py',108),
  ('cond -> cond , cond_singl','cond',3,'p_grammar_tester','tester.py',109),
  ('cond_singl -> conditional : conditional','cond_singl',3,'p_grammar_tester','tester.py',111),
  ('lambda -> FDEF ( ) { conditional }','lambda',6,'p_grammar_tester','tester.py',113),
  ('lambda -> FDEF ( pattern_list ) { conditional }','lambda',7,'p_grammar_tester','tester.py',114),
  ('multivar -> primaryvar','multivar',1,'p_grammar_tester','tester.py',116),
  ('multivar -> rlist','multivar',1,'p_grammar_tester','tester.py',117),
  ('multivar -> rtuple','multivar',1,'p_grammar_tester','tester.py',118),
  ('multivar -> multivar ( condition_list )','multivar',4,'p_grammar_tester','tester.py',119),
  ('primaryvar -> ID','primaryvar',1,'p_grammar_tester','tester.py',121),
  ('primaryvar -> [ SPECIALID ]','primaryvar',3,'p_grammar_tester','tester.py',122),
  ('primaryvar -> INTT','primaryvar',1,'p_grammar_tester','tester.py',123),
  ('primaryvar -> FLOATT','primaryvar',1,'p_grammar_tester','tester.py',124),
  ('primaryvar -> CHART','primaryvar',1,'p_grammar_tester','tester.py',125),
  ('primaryvar -> BOOLT','primaryvar',1,'p_grammar_tester','tester.py',126),
  ('primaryvar -> ( conditional )','primaryvar',3,'p_grammar_tester','tester.py',127),
  ('rtuple -> ( )','rtuple',2,'p_grammar_tester','tester.py',129),
  ('rtuple -> ( rtuple_cont )','rtuple',3,'p_grammar_tester','tester.py',130),
  ('rtuple_cont -> conditional , conditional','rtuple_cont',3,'p_grammar_tester','tester.py',132),
  ('rtuple_cont -> rtuple_cont , conditional','rtuple_cont',3,'p_grammar_tester','tester.py',133),
  ('rlist -> [ ]','rlist',2,'p_grammar_tester','tester.py',135),
  ('rlist -> [ condition_list ]','rlist',3,'p_grammar_tester','tester.py',136),
  ('rlist -> [ conditional | conditional ]','rlist',5,'p_grammar_tester','tester.py',137),
  ('rlist -> [ conditional RANGER conditional ]','rlist',5,'p_grammar_tester','tester.py',138),
  ('condition_list -> conditional','condition_list',1,'p_grammar_tester','tester.py',140),
  ('condition_list -> condition_list , conditional','condition_list',3,'p_grammar_tester','tester.py',141),
]
