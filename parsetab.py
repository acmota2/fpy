
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "BEGIN BOOL CHAR COND ELSE END FDEF ID IF LET NUM RANGER SPECIALID STRING THEN\n    all             : BEGIN body END\n\n    body            : function\n                    | body function\n\n    function        : FDEF prefix args '{' compound '}'\n                    | FDEF prefix args '{' let_block compound '}'\n\n    args            : '(' ')'\n                    | '(' pattern_list ')'\n\n    prefix          : ID\n                    | '[' SPECIALID ']'\n\n    let_block       : LET '{' let_cont '}'\n\n    let_cont        : assign\n                    | let_cont ',' assign\n\n    assign          : lpattern '=' compound\n\n    lpattern        : lvar\n                    | llist\n                    | ltuple\n\n    llist           : '[' ']'\n                    | '[' pattern_list ']'\n                    | '[' lpattern '|' lpattern ']'\n\n    pattern_list    : lpattern\n                    | pattern_list ',' lpattern\n\n    ltuple          : '(' ')'\n                    | '(' ltuple_cont ')'\n\n    ltuple_cont     : lpattern ',' lpattern\n                    | ltuple_cont ',' lpattern\n\n    lvar            : ID\n                    | '[' SPECIALID ']'\n                    | STRING\n                    | NUM\n                    | CHAR\n                    | BOOL\n                    | '(' lpattern ')'\n\n    compound        : expression\n                    | compound infix expression\n                    | '(' infix expression ')'\n                    | '(' expression infix ')'\n\n    infix           : '`' ID '`'\n                    | SPECIALID\n\n    expression      : multivar\n                    | lambda\n                    | conditional\n\n    lambda          : FDEF '(' ')' '{' expression '}' \n                    | FDEF '(' pattern_list ')' '{' expression '}'\n\n    conditional     : COND '{' cond ',' ELSE ':' expression '}'\n                    | IF expression THEN expression ELSE expression\n\n    cond            : cond_singl\n                    | cond ',' cond_singl\n\n    cond_singl      : expression ':' expression\n\n    multivar        : primaryvar\n                    | rlist\n                    | rtuple\n                    | multivar '(' compound_list ')'\n\n    compound_list   : compound\n                    | compound_list ',' compound\n\n    primaryvar      : ID\n                    | '[' SPECIALID ']'\n                    | STRING\n                    | NUM\n                    | CHAR\n                    | BOOL\n                    | '(' expression ')'\n\n    rtuple          : '(' ')'\n                    | '(' rtuple_cont ')'\n\n    rtuple_cont     : expression ',' expression\n                    | rtuple_cont ',' expression\n\n    rlist           : '[' ']'\n                    | '[' exp_list ']'\n                    | '[' expression '|' expression ']'\n                    | '[' expression RANGER expression ']'\n\n    exp_list        : expression\n                    | exp_list ',' expression\n    "
    
_lr_action_items = {'BEGIN':([0,],[2,]),'$end':([1,6,],[0,-1,]),'FDEF':([2,3,4,7,14,31,33,42,44,59,60,62,64,65,70,71,89,94,96,105,108,109,110,114,116,121,123,125,126,127,134,141,146,],[5,5,-2,-3,29,29,29,29,29,-4,29,-38,29,29,29,29,-5,29,29,29,29,29,29,29,-37,-10,29,29,29,29,29,29,29,]),'END':([3,4,7,59,89,],[6,-2,-3,-4,-5,]),'ID':([5,12,14,15,23,31,33,42,44,53,58,60,61,62,64,65,69,70,71,78,80,84,94,96,105,108,109,110,114,116,121,122,123,125,126,127,134,141,146,],[9,22,43,22,22,43,43,43,43,22,22,43,88,-38,43,43,22,43,43,22,22,22,43,43,43,43,43,43,43,-37,-10,22,43,43,43,43,43,43,43,]),'[':([5,12,14,15,23,31,33,42,44,53,58,60,62,64,65,69,70,71,78,80,84,94,96,105,108,109,110,114,116,121,122,123,125,126,127,134,141,146,],[10,23,44,23,23,44,44,44,44,23,23,44,-38,44,44,23,44,44,23,23,23,44,44,44,44,44,44,44,-37,-10,23,44,44,44,44,44,44,44,]),'(':([8,9,12,14,15,23,28,29,31,33,35,38,39,40,42,43,44,45,46,47,48,53,58,60,62,64,65,67,69,70,71,74,78,80,84,93,94,95,96,105,106,107,108,109,110,114,116,121,122,123,124,125,126,127,134,141,142,143,146,],[12,-8,15,33,15,15,-9,58,33,64,70,-49,-50,-51,64,-55,64,-57,-58,-59,-60,15,15,64,-38,64,64,-62,15,33,64,-66,15,15,15,-61,64,-63,64,64,-56,-67,64,64,64,64,-37,-10,15,33,-52,33,64,64,64,64,-68,-69,64,]),'SPECIALID':([10,23,30,32,33,35,36,37,38,39,40,43,44,45,46,47,48,63,66,67,74,87,93,95,101,106,107,117,118,124,136,137,142,143,144,147,148,150,],[13,54,62,-33,62,-39,-40,-41,-49,-50,-51,-55,73,-57,-58,-59,-60,62,62,-62,-66,-34,-61,-63,62,-56,-67,-35,-36,-52,62,62,-68,-69,-42,-45,-43,-44,]),'{':([11,16,34,41,52,85,115,],[14,-6,69,71,-7,114,134,]),')':([12,15,17,18,19,20,21,22,24,25,26,27,32,33,35,36,37,38,39,40,43,45,46,47,48,49,50,51,55,58,62,64,66,67,68,74,77,79,81,82,83,86,87,90,91,92,93,95,100,101,106,107,111,112,116,117,118,119,120,124,132,137,142,143,144,147,148,150,],[16,50,52,-20,-14,-15,-16,-26,-28,-29,-30,-31,-33,67,-39,-40,-41,-49,-50,-51,-55,-57,-58,-59,-60,77,-22,79,-17,85,-38,67,93,-62,95,-66,-32,-23,-21,-27,-18,115,-34,93,117,118,-61,-63,124,-53,-56,-67,-24,-25,-37,-35,-36,-64,-65,-52,-19,-54,-68,-69,-42,-45,-43,-44,]),'STRING':([12,14,15,23,31,33,42,44,53,58,60,62,64,65,69,70,71,78,80,84,94,96,105,108,109,110,114,116,121,122,123,125,126,127,134,141,146,],[24,45,24,24,45,45,45,45,24,24,45,-38,45,45,24,45,45,24,24,24,45,45,45,45,45,45,45,-37,-10,24,45,45,45,45,45,45,45,]),'NUM':([12,14,15,23,31,33,42,44,53,58,60,62,64,65,69,70,71,78,80,84,94,96,105,108,109,110,114,116,121,122,123,125,126,127,134,141,146,],[25,46,25,25,46,46,46,46,25,25,46,-38,46,46,25,46,46,25,25,25,46,46,46,46,46,46,46,-37,-10,25,46,46,46,46,46,46,46,]),'CHAR':([12,14,15,23,31,33,42,44,53,58,60,62,64,65,69,70,71,78,80,84,94,96,105,108,109,110,114,116,121,122,123,125,126,127,134,141,146,],[26,47,26,26,47,47,47,47,26,26,47,-38,47,47,26,47,47,26,26,26,47,47,47,47,47,47,47,-37,-10,26,47,47,47,47,47,47,47,]),'BOOL':([12,14,15,23,31,33,42,44,53,58,60,62,64,65,69,70,71,78,80,84,94,96,105,108,109,110,114,116,121,122,123,125,126,127,134,141,146,],[27,48,27,27,48,48,48,48,27,27,48,-38,48,48,27,48,48,27,27,27,48,48,48,48,48,48,48,-37,-10,27,48,48,48,48,48,48,48,]),']':([13,19,20,21,22,23,24,25,26,27,35,36,37,38,39,40,43,44,45,46,47,48,50,54,55,56,57,67,73,74,75,76,77,79,81,82,83,93,95,106,107,113,124,129,130,131,132,142,143,144,147,148,150,],[28,-14,-15,-16,-26,55,-28,-29,-30,-31,-39,-40,-41,-49,-50,-51,-55,74,-57,-58,-59,-60,-22,82,-17,83,-20,-62,106,-66,107,-70,-32,-23,-21,-27,-18,-61,-63,-56,-67,132,-52,-71,142,143,-19,-68,-69,-42,-45,-43,-44,]),'LET':([14,],[34,]),'COND':([14,31,33,42,44,60,62,64,65,70,71,94,96,105,108,109,110,114,116,121,123,125,126,127,134,141,146,],[41,41,41,41,41,41,-38,41,41,41,41,41,41,41,41,41,41,41,-37,-10,41,41,41,41,41,41,41,]),'IF':([14,31,33,42,44,60,62,64,65,70,71,94,96,105,108,109,110,114,116,121,123,125,126,127,134,141,146,],[42,42,42,42,42,42,-38,42,42,42,42,42,42,42,42,42,42,42,-37,-10,42,42,42,42,42,42,42,]),',':([17,18,19,20,21,22,24,25,26,27,32,35,36,37,38,39,40,43,45,46,47,48,49,50,51,55,56,57,66,67,68,74,75,76,77,79,81,82,83,86,87,90,93,95,97,98,100,101,102,104,106,107,111,112,117,118,119,120,124,129,132,135,136,137,139,140,142,143,144,147,148,150,],[53,-20,-14,-15,-16,-26,-28,-29,-30,-31,-33,-39,-40,-41,-49,-50,-51,-55,-57,-58,-59,-60,78,-22,80,-17,53,-20,94,-62,96,-66,108,-70,-32,-23,-21,-27,-18,53,-34,94,-61,-63,122,-11,125,-53,126,-46,-56,-67,-24,-25,-35,-36,-64,-65,-52,-71,-19,-12,-13,-54,-47,-48,-68,-69,-42,-45,-43,-44,]),'|':([19,20,21,22,24,25,26,27,35,36,37,38,39,40,43,45,46,47,48,50,55,57,67,74,76,77,79,82,83,93,95,106,107,124,132,142,143,144,147,148,150,],[-14,-15,-16,-26,-28,-29,-30,-31,-39,-40,-41,-49,-50,-51,-55,-57,-58,-59,-60,-22,-17,84,-62,-66,109,-32,-23,-27,-18,-61,-63,-56,-67,-52,-19,-68,-69,-42,-45,-43,-44,]),'=':([19,20,21,22,24,25,26,27,50,55,77,79,82,83,99,132,],[-14,-15,-16,-26,-28,-29,-30,-31,-22,-17,-32,-23,-27,-18,123,-19,]),'}':([30,32,35,36,37,38,39,40,43,45,46,47,48,63,67,74,87,93,95,97,98,106,107,117,118,124,133,135,136,142,143,144,145,147,148,149,150,],[59,-33,-39,-40,-41,-49,-50,-51,-55,-57,-58,-59,-60,89,-62,-66,-34,-61,-63,121,-11,-56,-67,-35,-36,-52,144,-12,-13,-68,-69,-42,148,-45,-43,150,-44,]),'`':([30,32,33,35,36,37,38,39,40,43,45,46,47,48,63,66,67,74,87,88,93,95,101,106,107,117,118,124,136,137,142,143,144,147,148,150,],[61,-33,61,-39,-40,-41,-49,-50,-51,-55,-57,-58,-59,-60,61,61,-62,-66,-34,116,-61,-63,61,-56,-67,-35,-36,-52,61,61,-68,-69,-42,-45,-43,-44,]),'THEN':([35,36,37,38,39,40,43,45,46,47,48,67,72,74,93,95,106,107,124,142,143,144,147,148,150,],[-39,-40,-41,-49,-50,-51,-55,-57,-58,-59,-60,-62,105,-66,-61,-63,-56,-67,-52,-68,-69,-42,-45,-43,-44,]),'RANGER':([35,36,37,38,39,40,43,45,46,47,48,67,74,76,93,95,106,107,124,142,143,144,147,148,150,],[-39,-40,-41,-49,-50,-51,-55,-57,-58,-59,-60,-62,-66,110,-61,-63,-56,-67,-52,-68,-69,-42,-45,-43,-44,]),':':([35,36,37,38,39,40,43,45,46,47,48,67,74,93,95,103,106,107,124,138,142,143,144,147,148,150,],[-39,-40,-41,-49,-50,-51,-55,-57,-58,-59,-60,-62,-66,-61,-63,127,-56,-67,-52,146,-68,-69,-42,-45,-43,-44,]),'ELSE':([35,36,37,38,39,40,43,45,46,47,48,67,74,93,95,106,107,124,126,128,142,143,144,147,148,150,],[-39,-40,-41,-49,-50,-51,-55,-57,-58,-59,-60,-62,-66,-61,-63,-56,-67,-52,138,141,-68,-69,-42,-45,-43,-44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'all':([0,],[1,]),'body':([2,],[3,]),'function':([2,3,],[4,7,]),'prefix':([5,],[8,]),'args':([8,],[11,]),'pattern_list':([12,23,58,],[17,56,86,]),'lpattern':([12,15,23,53,58,69,78,80,84,122,],[18,49,57,81,18,99,111,112,113,99,]),'lvar':([12,15,23,53,58,69,78,80,84,122,],[19,19,19,19,19,19,19,19,19,19,]),'llist':([12,15,23,53,58,69,78,80,84,122,],[20,20,20,20,20,20,20,20,20,20,]),'ltuple':([12,15,23,53,58,69,78,80,84,122,],[21,21,21,21,21,21,21,21,21,21,]),'compound':([14,31,70,123,125,],[30,63,101,136,137,]),'let_block':([14,],[31,]),'expression':([14,31,33,42,44,60,64,65,70,71,94,96,105,108,109,110,114,123,125,126,127,134,141,146,],[32,32,66,72,76,87,90,91,32,103,119,120,128,129,130,131,133,32,32,103,140,145,147,149,]),'multivar':([14,31,33,42,44,60,64,65,70,71,94,96,105,108,109,110,114,123,125,126,127,134,141,146,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'lambda':([14,31,33,42,44,60,64,65,70,71,94,96,105,108,109,110,114,123,125,126,127,134,141,146,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'conditional':([14,31,33,42,44,60,64,65,70,71,94,96,105,108,109,110,114,123,125,126,127,134,141,146,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'primaryvar':([14,31,33,42,44,60,64,65,70,71,94,96,105,108,109,110,114,123,125,126,127,134,141,146,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'rlist':([14,31,33,42,44,60,64,65,70,71,94,96,105,108,109,110,114,123,125,126,127,134,141,146,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'rtuple':([14,31,33,42,44,60,64,65,70,71,94,96,105,108,109,110,114,123,125,126,127,134,141,146,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'ltuple_cont':([15,],[51,]),'infix':([30,33,63,66,101,136,137,],[60,65,60,92,60,60,60,]),'rtuple_cont':([33,64,],[68,68,]),'exp_list':([44,],[75,]),'let_cont':([69,],[97,]),'assign':([69,122,],[98,135,]),'compound_list':([70,],[100,]),'cond':([71,],[102,]),'cond_singl':([71,126,],[104,139,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> all","S'",1,None,None,None),
  ('all -> BEGIN body END','all',3,'p_grammar_tester','tester.py',18),
  ('body -> function','body',1,'p_grammar_tester','tester.py',20),
  ('body -> body function','body',2,'p_grammar_tester','tester.py',21),
  ('function -> FDEF prefix args { compound }','function',6,'p_grammar_tester','tester.py',23),
  ('function -> FDEF prefix args { let_block compound }','function',7,'p_grammar_tester','tester.py',24),
  ('args -> ( )','args',2,'p_grammar_tester','tester.py',26),
  ('args -> ( pattern_list )','args',3,'p_grammar_tester','tester.py',27),
  ('prefix -> ID','prefix',1,'p_grammar_tester','tester.py',29),
  ('prefix -> [ SPECIALID ]','prefix',3,'p_grammar_tester','tester.py',30),
  ('let_block -> LET { let_cont }','let_block',4,'p_grammar_tester','tester.py',32),
  ('let_cont -> assign','let_cont',1,'p_grammar_tester','tester.py',34),
  ('let_cont -> let_cont , assign','let_cont',3,'p_grammar_tester','tester.py',35),
  ('assign -> lpattern = compound','assign',3,'p_grammar_tester','tester.py',37),
  ('lpattern -> lvar','lpattern',1,'p_grammar_tester','tester.py',39),
  ('lpattern -> llist','lpattern',1,'p_grammar_tester','tester.py',40),
  ('lpattern -> ltuple','lpattern',1,'p_grammar_tester','tester.py',41),
  ('llist -> [ ]','llist',2,'p_grammar_tester','tester.py',43),
  ('llist -> [ pattern_list ]','llist',3,'p_grammar_tester','tester.py',44),
  ('llist -> [ lpattern | lpattern ]','llist',5,'p_grammar_tester','tester.py',45),
  ('pattern_list -> lpattern','pattern_list',1,'p_grammar_tester','tester.py',47),
  ('pattern_list -> pattern_list , lpattern','pattern_list',3,'p_grammar_tester','tester.py',48),
  ('ltuple -> ( )','ltuple',2,'p_grammar_tester','tester.py',50),
  ('ltuple -> ( ltuple_cont )','ltuple',3,'p_grammar_tester','tester.py',51),
  ('ltuple_cont -> lpattern , lpattern','ltuple_cont',3,'p_grammar_tester','tester.py',53),
  ('ltuple_cont -> ltuple_cont , lpattern','ltuple_cont',3,'p_grammar_tester','tester.py',54),
  ('lvar -> ID','lvar',1,'p_grammar_tester','tester.py',56),
  ('lvar -> [ SPECIALID ]','lvar',3,'p_grammar_tester','tester.py',57),
  ('lvar -> STRING','lvar',1,'p_grammar_tester','tester.py',58),
  ('lvar -> NUM','lvar',1,'p_grammar_tester','tester.py',59),
  ('lvar -> CHAR','lvar',1,'p_grammar_tester','tester.py',60),
  ('lvar -> BOOL','lvar',1,'p_grammar_tester','tester.py',61),
  ('lvar -> ( lpattern )','lvar',3,'p_grammar_tester','tester.py',62),
  ('compound -> expression','compound',1,'p_grammar_tester','tester.py',64),
  ('compound -> compound infix expression','compound',3,'p_grammar_tester','tester.py',65),
  ('compound -> ( infix expression )','compound',4,'p_grammar_tester','tester.py',66),
  ('compound -> ( expression infix )','compound',4,'p_grammar_tester','tester.py',67),
  ('infix -> ` ID `','infix',3,'p_grammar_tester','tester.py',69),
  ('infix -> SPECIALID','infix',1,'p_grammar_tester','tester.py',70),
  ('expression -> multivar','expression',1,'p_grammar_tester','tester.py',72),
  ('expression -> lambda','expression',1,'p_grammar_tester','tester.py',73),
  ('expression -> conditional','expression',1,'p_grammar_tester','tester.py',74),
  ('lambda -> FDEF ( ) { expression }','lambda',6,'p_grammar_tester','tester.py',76),
  ('lambda -> FDEF ( pattern_list ) { expression }','lambda',7,'p_grammar_tester','tester.py',77),
  ('conditional -> COND { cond , ELSE : expression }','conditional',8,'p_grammar_tester','tester.py',79),
  ('conditional -> IF expression THEN expression ELSE expression','conditional',6,'p_grammar_tester','tester.py',80),
  ('cond -> cond_singl','cond',1,'p_grammar_tester','tester.py',82),
  ('cond -> cond , cond_singl','cond',3,'p_grammar_tester','tester.py',83),
  ('cond_singl -> expression : expression','cond_singl',3,'p_grammar_tester','tester.py',85),
  ('multivar -> primaryvar','multivar',1,'p_grammar_tester','tester.py',87),
  ('multivar -> rlist','multivar',1,'p_grammar_tester','tester.py',88),
  ('multivar -> rtuple','multivar',1,'p_grammar_tester','tester.py',89),
  ('multivar -> multivar ( compound_list )','multivar',4,'p_grammar_tester','tester.py',90),
  ('compound_list -> compound','compound_list',1,'p_grammar_tester','tester.py',92),
  ('compound_list -> compound_list , compound','compound_list',3,'p_grammar_tester','tester.py',93),
  ('primaryvar -> ID','primaryvar',1,'p_grammar_tester','tester.py',95),
  ('primaryvar -> [ SPECIALID ]','primaryvar',3,'p_grammar_tester','tester.py',96),
  ('primaryvar -> STRING','primaryvar',1,'p_grammar_tester','tester.py',97),
  ('primaryvar -> NUM','primaryvar',1,'p_grammar_tester','tester.py',98),
  ('primaryvar -> CHAR','primaryvar',1,'p_grammar_tester','tester.py',99),
  ('primaryvar -> BOOL','primaryvar',1,'p_grammar_tester','tester.py',100),
  ('primaryvar -> ( expression )','primaryvar',3,'p_grammar_tester','tester.py',101),
  ('rtuple -> ( )','rtuple',2,'p_grammar_tester','tester.py',103),
  ('rtuple -> ( rtuple_cont )','rtuple',3,'p_grammar_tester','tester.py',104),
  ('rtuple_cont -> expression , expression','rtuple_cont',3,'p_grammar_tester','tester.py',106),
  ('rtuple_cont -> rtuple_cont , expression','rtuple_cont',3,'p_grammar_tester','tester.py',107),
  ('rlist -> [ ]','rlist',2,'p_grammar_tester','tester.py',109),
  ('rlist -> [ exp_list ]','rlist',3,'p_grammar_tester','tester.py',110),
  ('rlist -> [ expression | expression ]','rlist',5,'p_grammar_tester','tester.py',111),
  ('rlist -> [ expression RANGER expression ]','rlist',5,'p_grammar_tester','tester.py',112),
  ('exp_list -> expression','exp_list',1,'p_grammar_tester','tester.py',114),
  ('exp_list -> exp_list , expression','exp_list',3,'p_grammar_tester','tester.py',115),
]
