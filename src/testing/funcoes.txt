'''fpy
fdef foldl(_,acc,[]) { acc }
fdef foldl(f,acc,[h|t]) {
    foldl(f,f(acc,h),t)
}

fdef bla(l) {
    map([+1],l)
}

fdef map(_,[]) { [] }
fdef map(f,[h|t]) {
    [ f(h) | map(f,t) ]
}

fdef filter(_,[]) { [] }
fdef filter(f,[h|t]) {
    [?..?] {
        f(h): filter(f,t),
        else: [ h | filter(f,t) ]
    }
}

fdef curry(f,a,b) {
    f((a,b))
}

fdef uncurry(f,(a,b)) {
    f(a,b)
}

fdef [.](f: (b) -> c, g: (a) -> b, a: a) -> c {
    f . g
}

fdef [><](f,g,(a,b)) {
    (f(a), g(b))
}


fdef enumFromTo(n,m) {
    [?..?] {
        m < n: [],
        else: [n | enumFromTo(n+1, m)]
    }
}

fdef zip([],_) { [] }
fdef zip(_,[]) { [] }
fdef zip([h|t],[h2|t2]) {
    [ (h,h2) | zip(t,t2) ]
}

fdef [++]([],l) { l }
fdef [++](l,[]) { l }
fdef [++]([h|t], l) {
    [h | t ++ l]
}

# TODO: ver porque é que ele se caga nestes 3 casos
fdef fact(0) { 1 }
fdef fact(n) {
    n * fact(n - 1)
}

fdef foldr(_,acc,[]) { acc }
fdef foldr(f,acc,[h|t]) {
    let { _ = foldr(f,acc,t) }
    f(acc,h)
}

fdef ret_string(bla: string) {
    bla ++ "abc"
}
'''
'''fpy
fdef bla(f,n) {
        n + 1
}
'''
'''fpy
fdef fact(0) { 1 }
fdef fact(n) {
    n + 1
}
'''