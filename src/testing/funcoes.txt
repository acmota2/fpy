'''fpy
fdef foldl(_,acc,[]) { acc }
fdef foldl(f,acc,[h|t]) {
    foldl(f,f(acc,h),t)
}

fdef bla(l) {
    map([+1],l)
}

fdef map(_,[]) { [] }
fdef map(f,[h|t]) {
    [ f(h) | map(f,t) ]
}

fdef filter(_,[]) { [] }
fdef filter(f,[h|t]) {
    [?..?] {
        f(h): filter(f,t),
        else: [ h | filter(f,t) ]
    }
}

fdef curry(f,a,b) {
    f((a,b))
}

fdef uncurry(f,(a,b)) {
    f(a,b)
}

fdef [.](f: (b) -> c, g: (a) -> b, a: a) -> c {
    f . g
}

fdef [><](f,g,(a,b)) {
    (f(a), g(b))
}


fdef enumFromTo(n,m) {
    [?..?] {
        m < n: [],
        else: [n | enumFromTo(n+1, m)]
    }
}

fdef zip([],_) { [] }
fdef zip(_,[]) { [] }
fdef zip([h|t],[h2|t2]) {
    [ (h,h2) | zip(t,t2) ]
}

fdef fact(0) { 1 }
fdef fact(n) {
    n * fact(n - 1)
}
'''
'''fpy
fdef ret_string(bla: string) {
    bla ++ "abc"
}
'''
'''fpy
fdef bla(f,n) {
        n + 1
}
'''
'''fpy
fdef fact(0) { 1 }
fdef fact(n) {
    n + 1
}
'''
'''fpy              
fdef bla(n) {
        (fdef(y) { y })(n)
}
'''
'''fpy
fdef [><](f: (a) -> c,g: (b) -> d,(a,b): (a,b)) -> (c,d) {
    (f(a), g(b))
}
'''
'''fpy
fdef bla2(n) {
    bla + 1
}

let bla = 1.1
'''
'''fpy
fdef id(n) { n }

fdef id2(n) { n }
'''